version: "3.8"

services:
  portainer:
    image: portainer/portainer-ce:latest
    ports:
      - 9443:9443
      - 9000:9000
    volumes:
      - data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped

  # Contenedor de MySQL
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: always
    env_file:
      - ./Back/.env  
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword  
    ports:
      - "3306:3306"  
    volumes:
      - mysql_data:/var/lib/mysql  

  # Contenedor de Node.js (Backend)
  app:
    build: 
      context: ./Back  
      dockerfile: Dockerfile.Node
    container_name: node_app
    restart: always
    env_file:
      - ./Back/.env  
    ports:
      - "3002:3002"  
    depends_on:
      - mysql
    volumes:
      - ./Back:/app  
      - /app/node_modules  

  # Contenedor de Vuetify (Frontend)
  frontend:
    build: 
      context: ./Front/vuetify-boxhead  
      dockerfile: Dockerfile.vuetify
    container_name: vuetify_frontend
    restart: always
    ports:
      - "7001:7001"  
    volumes:
      - ./Front/vuetify-boxhead:/app
      - /app/node_modules
    working_dir: /app
  
    # Contenedor de Python
  python-app:
    build:
      context: ./Back/Statistics  # Asumiendo que tu código Python está en esta carpeta
      dockerfile: Dockerfile.Python  # El Dockerfile que hemos definido para Python
    container_name: python_app
    restart: always
    env_file:
      - ./Back/.env  # Si tienes variables de entorno específicas para el contenedor Python
    volumes:
      - ./Back/Statistics:/app  # Mapea tu código Python al contenedor
      - ./Back/Statistics:/Images
   
  # Contenedor de Adminer (Interfaz para gestionar la base de datos)
  adminer:
    image: adminer
    container_name: adminer
    restart: always
    ports:
      - "8080:8080"  

volumes:
  data:
  mysql_data: